// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole @default(BUYER)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  agent       Agent?
  buyer       Buyer?
  reviews     Review[]
  transactions Transaction[]
  chats       Chat[]
  messages    Message[]

  @@map("users")
}

model Agent {
  id           String   @id @default(cuid())
  userId       String   @unique
  licenseNumber String  @unique
  agency       String
  experience   Int      @default(0)
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  responseTime Int      @default(24) // in hours
  bio          String?
  specialties  String[]
  serviceAreas String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties   Property[]
  reviews      Review[]
  metrics      AgentMetric[]
  chats        Chat[]

  @@map("agents")
}

model Buyer {
  id             String   @id @default(cuid())
  userId         String   @unique
  preferredAreas String[]
  budgetMin      Float?
  budgetMax      Float?
  propertyTypes  String[]
  savedProperties String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@map("buyers")
}

model Property {
  id            String        @id @default(cuid())
  title         String
  description   String
  type          PropertyType
  price         Float
  currency      String        @default("USD")
  bedrooms      Int
  bathrooms     Int
  area          Float
  areaUnit      String        @default("sqft")
  address       String
  city          String
  state         String
  zipCode       String
  country       String        @default("US")
  coordinates   Json?
  images        String[]
  virtualTourUrl String?
  amenities     String[]
  yearBuilt     Int?
  lotSize       Float?
  status        PropertyStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  agentId       String
  agent         Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  reviews       Review[]
  transactions  Transaction[]
  chats         Chat[]

  @@map("properties")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  reviewType  ReviewType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Can be either agent or property review
  agentId     String?
  agent       Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  amount        Float
  currency      String            @default("USD")
  status        TransactionStatus @default(PENDING)
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?

  // Relationships
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  buyerId       String?
  buyer         Buyer?            @relation(fields: [buyerId], references: [id], onDelete: SetNull)
  propertyId    String
  property      Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model AgentMetric {
  id                  String   @id @default(cuid())
  agentId             String
  month               Int      // 1-12
  year                Int
  propertiesListed    Int      @default(0)
  propertiesSold      Int      @default(0)
  totalRevenue        Float    @default(0)
  avgResponseTime     Int      @default(24)
  customerSatisfaction Float   @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  agent               Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, month, year])
  @@map("agent_metrics")
}

model Chat {
  id         String   @id @default(cuid())
  title      String?
  status     ChatStatus @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId    String?
  agent      Agent?   @relation(fields: [agentId], references: [id], onDelete: SetNull)
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  messages   Message[]

  @@map("chats")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  sender    MessageSender
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())

  // Relationships
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Enums
enum UserRole {
  BUYER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  INACTIVE
}

enum ReviewType {
  AGENT
  PROPERTY
}

enum TransactionType {
  PURCHASE
  RENT
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ChatStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum MessageSender {
  USER
  AGENT
  BOT
}